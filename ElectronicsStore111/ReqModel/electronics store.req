RequirementsModel:: UseCaseModel ElectronicsStore111 { UseCaseContext CustomerOrLoyaltyMemberService { UC :: paymentValidation definedBySSD(PaymentValidationSSD) relatedService(PaymentValidationService) UC :: giveFeedback definedBySSD(GiveFeedbackSSD) relatedService(GiveFeedbackService) UC :: reviewCart definedBySSD(ReviewCartSSD) relatedService(ReviewCartService) UC :: membershipStatus definedBySSD(MembershipStatusSSD) relatedService(MembershipStatusService) UC :: signup definedBySSD(SignupSSD) relatedService(SignupService) UC :: inStorePaymentValidation definedBySSD(InStorePaymentValidationSSD) relatedService(InStorePaymentValidationService) UC :: modifyCart definedBySSD(ModifyCartSSD) relatedService(ModifyCartService) UC :: browseProducts definedBySSD(BrowseProductsSSD) relatedService(BrowseProductsService) UC :: checkOut include paymentValidation definedBySSD(CheckOutSSD) relatedService(CheckOutService) UC :: returnProduct definedBySSD(ReturnProductSSD) relatedService(ReturnProductService) UC :: credentialsCheck definedBySSD(CredentialsCheckSSD) relatedService(CredentialsCheckService) } UseCaseContext CashierService { UC :: scanProducts definedBySSD(ScanProductsSSD) relatedService(ScanProductsService) UC :: processCheckout definedBySSD(ProcessCheckoutSSD) relatedService(ProcessCheckoutService) UC :: printReceipt definedBySSD(PrintReceiptSSD) relatedService(PrintReceiptService) UC :: processReturn include returnProduct definedBySSD(ProcessReturnSSD) relatedService(ProcessReturnService) UC :: processPayment include inStorePaymentValidation definedBySSD(ProcessPaymentSSD) relatedService(ProcessPaymentService) } UseCaseContext StoreManagerService { UC :: manageInventory definedBySSD(ManageInventorySSD) relatedService(ManageInventoryService) UC :: accessFeedback definedBySSD(AccessFeedbackSSD) relatedService(AccessFeedbackService) UC :: viewReports definedBySSD(ViewReportsSSD) relatedService(ViewReportsService) } UseCaseContext SupplierService { UC :: processOrders definedBySSD(ProcessOrdersSSD) relatedService(ProcessOrdersService) UC :: viewNewOrders definedBySSD(ViewNewOrdersSSD) relatedService(ViewNewOrdersService) } UseCaseContext UserService { UC :: systemLogin include credentialsCheck definedBySSD(SystemLoginSSD) relatedService(SystemLoginService) }

	Actor CustomerOrLoyaltyMember("Customer/LoyaltyMember") extends User {
		browseProducts
		checkOut
		returnProduct
		reviewCart
		modifyCart
		giveFeedback
		membershipStatus
		signup
	}

//}
	Actor Cashier extends User {
		scanProducts
		processPayment
		processReturn
		printReceipt
		processCheckout
	}

	Actor StoreManager extends User {
		viewReports
		manageInventory
		accessFeedback
	}

	Actor Supplier extends User {
		processOrders
		viewNewOrders
	}

	Actor User {
		systemLogin
	}

	Interaction SignupSSD {

		[Participants: CustomerOrLoyaltyMember SignupService]

		CallMessage::SignupSSDCallMessage1(customerRegUsername SignupSSDCallMessage1SendingEnd -> SignupSSDExecution1StartEnd)
		ReturnMessage::SignupSSDCallMessage1Return(SignupSSDExecution1FinishEnd -> SignupSSDCallMessage1ReturnReceivingEnd SignupSSDCallMessage1)
		CallMessage::SignupSSDCallMessage3(customerRegPassword SignupSSDCallMessage3SendingEnd -> SignupSSDExecution2StartEnd)
		ReturnMessage::SignupSSDCallMessage3Return(SignupSSDExecution2FinishEnd -> SignupSSDCallMessage3ReturnReceivingEnd SignupSSDCallMessage3)
		CallMessage::SignupSSDCallMessage5(customerDetails SignupSSDCallMessage5SendingEnd -> SignupSSDExecution3StartEnd)
		ReturnMessage::SignupSSDCallMessage5Return(SignupSSDExecution3FinishEnd -> SignupSSDCallMessage5ReturnReceivingEnd SignupSSDCallMessage5)
		CallMessage::SignupSSDCallMessage7(saveDetails SignupSSDCallMessage7SendingEnd -> SignupSSDExecution4StartEnd)
		ReturnMessage::SignupSSDCallMessage7Return(SignupSSDExecution4FinishEnd -> SignupSSDCallMessage7ReturnReceivingEnd SignupSSDCallMessage7)

		Execution::SignupSSDExecution1(SignupService SignupSSDExecution1StartEnd SignupSSDExecution1FinishEnd)
		Execution::SignupSSDExecution2(SignupService SignupSSDExecution2StartEnd SignupSSDExecution2FinishEnd)
		Execution::SignupSSDExecution3(SignupService SignupSSDExecution3StartEnd SignupSSDExecution3FinishEnd)
		Execution::SignupSSDExecution4(SignupService SignupSSDExecution4StartEnd SignupSSDExecution4FinishEnd)

		MessageEnd::SignupSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage1)
		ExecutionEnd::SignupSSDExecution1StartEnd(SignupService SignupSSDExecution1)
		ExecutionEnd::SignupSSDExecution1FinishEnd(SignupService SignupSSDExecution1)
		MessageEnd::SignupSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage1Return)
		MessageEnd::SignupSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage3)
		ExecutionEnd::SignupSSDExecution2StartEnd(SignupService SignupSSDExecution2)
		ExecutionEnd::SignupSSDExecution2FinishEnd(SignupService SignupSSDExecution2)
		MessageEnd::SignupSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage3Return)
		MessageEnd::SignupSSDCallMessage5SendingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage5)
		ExecutionEnd::SignupSSDExecution3StartEnd(SignupService SignupSSDExecution3)
		ExecutionEnd::SignupSSDExecution3FinishEnd(SignupService SignupSSDExecution3)
		MessageEnd::SignupSSDCallMessage5ReturnReceivingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage5Return)
		MessageEnd::SignupSSDCallMessage7SendingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage7)
		ExecutionEnd::SignupSSDExecution4StartEnd(SignupService SignupSSDExecution4)
		ExecutionEnd::SignupSSDExecution4FinishEnd(SignupService SignupSSDExecution4)
		MessageEnd::SignupSSDCallMessage7ReturnReceivingEnd(CustomerOrLoyaltyMember SignupSSDCallMessage7Return)

	}

	Interaction SystemLoginSSD {

		[Participants: User SystemLoginService]

		CallMessage::SystemLoginSSDCallMessage1(usernameInput SystemLoginSSDCallMessage1SendingEnd -> SystemLoginSSDExecution1StartEnd)
		ReturnMessage::SystemLoginSSDCallMessage1Return(SystemLoginSSDExecution1FinishEnd -> SystemLoginSSDCallMessage1ReturnReceivingEnd SystemLoginSSDCallMessage1)
		CallMessage::SystemLoginSSDCallMessage3(passwordInput SystemLoginSSDCallMessage3SendingEnd -> SystemLoginSSDExecution2StartEnd)
		ReturnMessage::SystemLoginSSDCallMessage3Return(SystemLoginSSDExecution2FinishEnd -> SystemLoginSSDCallMessage3ReturnReceivingEnd SystemLoginSSDCallMessage3)

		Execution::SystemLoginSSDExecution1(SystemLoginService SystemLoginSSDExecution1StartEnd SystemLoginSSDExecution1FinishEnd)
		Execution::SystemLoginSSDExecution2(SystemLoginService SystemLoginSSDExecution2StartEnd SystemLoginSSDExecution2FinishEnd)

		MessageEnd::SystemLoginSSDCallMessage1SendingEnd(User SystemLoginSSDCallMessage1)
		ExecutionEnd::SystemLoginSSDExecution1StartEnd(SystemLoginService SystemLoginSSDExecution1)
		ExecutionEnd::SystemLoginSSDExecution1FinishEnd(SystemLoginService SystemLoginSSDExecution1)
		MessageEnd::SystemLoginSSDCallMessage1ReturnReceivingEnd(User SystemLoginSSDCallMessage1Return)
		MessageEnd::SystemLoginSSDCallMessage3SendingEnd(User SystemLoginSSDCallMessage3)
		ExecutionEnd::SystemLoginSSDExecution2StartEnd(SystemLoginService SystemLoginSSDExecution2)
		ExecutionEnd::SystemLoginSSDExecution2FinishEnd(SystemLoginService SystemLoginSSDExecution2)
		MessageEnd::SystemLoginSSDCallMessage3ReturnReceivingEnd(User SystemLoginSSDCallMessage3Return)

	}

	Interaction CredentialsCheckSSD {

		[Participants: User CredentialsCheckService]

		CallMessage::CredentialsCheckSSDCallMessage1(validationCheck CredentialsCheckSSDCallMessage1SendingEnd -> CredentialsCheckSSDExecution1StartEnd)
		ReturnMessage::CredentialsCheckSSDCallMessage1Return(CredentialsCheckSSDExecution1FinishEnd -> CredentialsCheckSSDCallMessage1ReturnReceivingEnd CredentialsCheckSSDCallMessage1)
		CallMessage::CredentialsCheckSSDCallMessage3(validationMessage CredentialsCheckSSDCallMessage3SendingEnd -> CredentialsCheckSSDExecution2StartEnd)
		ReturnMessage::CredentialsCheckSSDCallMessage3Return(CredentialsCheckSSDExecution2FinishEnd -> CredentialsCheckSSDCallMessage3ReturnReceivingEnd CredentialsCheckSSDCallMessage3)

		Execution::CredentialsCheckSSDExecution1(CredentialsCheckService CredentialsCheckSSDExecution1StartEnd CredentialsCheckSSDExecution1FinishEnd)
		Execution::CredentialsCheckSSDExecution2(CredentialsCheckService CredentialsCheckSSDExecution2StartEnd CredentialsCheckSSDExecution2FinishEnd)

		MessageEnd::CredentialsCheckSSDCallMessage1SendingEnd(User CredentialsCheckSSDCallMessage1)
		ExecutionEnd::CredentialsCheckSSDExecution1StartEnd(CredentialsCheckService CredentialsCheckSSDExecution1)
		ExecutionEnd::CredentialsCheckSSDExecution1FinishEnd(CredentialsCheckService CredentialsCheckSSDExecution1)
		MessageEnd::CredentialsCheckSSDCallMessage1ReturnReceivingEnd(User CredentialsCheckSSDCallMessage1Return)
		MessageEnd::CredentialsCheckSSDCallMessage3SendingEnd(User CredentialsCheckSSDCallMessage3)
		ExecutionEnd::CredentialsCheckSSDExecution2StartEnd(CredentialsCheckService CredentialsCheckSSDExecution2)
		ExecutionEnd::CredentialsCheckSSDExecution2FinishEnd(CredentialsCheckService CredentialsCheckSSDExecution2)
		MessageEnd::CredentialsCheckSSDCallMessage3ReturnReceivingEnd(User CredentialsCheckSSDCallMessage3Return)

	}

	Interaction BrowseProductsSSD {

		[Participants: CustomerOrLoyaltyMember BrowseProductsService]

		CallMessage::BrowseProductsSSDCallMessage1(viewAllProducts BrowseProductsSSDCallMessage1SendingEnd -> BrowseProductsSSDExecution1StartEnd)
		ReturnMessage::BrowseProductsSSDCallMessage1Return(BrowseProductsSSDExecution1FinishEnd -> BrowseProductsSSDCallMessage1ReturnReceivingEnd BrowseProductsSSDCallMessage1)
		CallMessage::BrowseProductsSSDCallMessage3(searchProducts BrowseProductsSSDCallMessage3SendingEnd -> BrowseProductsSSDExecution2StartEnd)
		ReturnMessage::BrowseProductsSSDCallMessage3Return(BrowseProductsSSDExecution2FinishEnd -> BrowseProductsSSDCallMessage3ReturnReceivingEnd BrowseProductsSSDCallMessage3)

		Execution::BrowseProductsSSDExecution1(BrowseProductsService BrowseProductsSSDExecution1StartEnd BrowseProductsSSDExecution1FinishEnd)
		Execution::BrowseProductsSSDExecution2(BrowseProductsService BrowseProductsSSDExecution2StartEnd BrowseProductsSSDExecution2FinishEnd)

		MessageEnd::BrowseProductsSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember BrowseProductsSSDCallMessage1)
		ExecutionEnd::BrowseProductsSSDExecution1StartEnd(BrowseProductsService BrowseProductsSSDExecution1)
		ExecutionEnd::BrowseProductsSSDExecution1FinishEnd(BrowseProductsService BrowseProductsSSDExecution1)
		MessageEnd::BrowseProductsSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember BrowseProductsSSDCallMessage1Return)
		MessageEnd::BrowseProductsSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember BrowseProductsSSDCallMessage3)
		ExecutionEnd::BrowseProductsSSDExecution2StartEnd(BrowseProductsService BrowseProductsSSDExecution2)
		ExecutionEnd::BrowseProductsSSDExecution2FinishEnd(BrowseProductsService BrowseProductsSSDExecution2)
		MessageEnd::BrowseProductsSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember BrowseProductsSSDCallMessage3Return)

	}

	Interaction CheckOutSSD {

		[Participants: CustomerOrLoyaltyMember CheckOutService]

		CallMessage::CheckOutSSDCallMessage1(cartSummary CheckOutSSDCallMessage1SendingEnd -> CheckOutSSDExecution1StartEnd)
		ReturnMessage::CheckOutSSDCallMessage1Return(CheckOutSSDExecution1FinishEnd -> CheckOutSSDCallMessage1ReturnReceivingEnd CheckOutSSDCallMessage1)
		CallMessage::CheckOutSSDCallMessage3(makePayment CheckOutSSDCallMessage3SendingEnd -> CheckOutSSDExecution2StartEnd)
		ReturnMessage::CheckOutSSDCallMessage3Return(CheckOutSSDExecution2FinishEnd -> CheckOutSSDCallMessage3ReturnReceivingEnd CheckOutSSDCallMessage3)
		CallMessage::CheckOutSSDCallMessage5(getGuestUserDetails CheckOutSSDCallMessage5SendingEnd -> CheckOutSSDExecution3StartEnd)
		ReturnMessage::CheckOutSSDCallMessage5Return(CheckOutSSDExecution3FinishEnd -> CheckOutSSDCallMessage5ReturnReceivingEnd CheckOutSSDCallMessage5)
		CallMessage::CheckOutSSDCallMessage7(newOrder CheckOutSSDCallMessage7SendingEnd -> CheckOutSSDExecution4StartEnd)
		ReturnMessage::CheckOutSSDCallMessage7Return(CheckOutSSDExecution4FinishEnd -> CheckOutSSDCallMessage7ReturnReceivingEnd CheckOutSSDCallMessage7)

		Execution::CheckOutSSDExecution1(CheckOutService CheckOutSSDExecution1StartEnd CheckOutSSDExecution1FinishEnd)
		Execution::CheckOutSSDExecution2(CheckOutService CheckOutSSDExecution2StartEnd CheckOutSSDExecution2FinishEnd)
		Execution::CheckOutSSDExecution3(CheckOutService CheckOutSSDExecution3StartEnd CheckOutSSDExecution3FinishEnd)
		Execution::CheckOutSSDExecution4(CheckOutService CheckOutSSDExecution4StartEnd CheckOutSSDExecution4FinishEnd)

		MessageEnd::CheckOutSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage1)
		ExecutionEnd::CheckOutSSDExecution1StartEnd(CheckOutService CheckOutSSDExecution1)
		ExecutionEnd::CheckOutSSDExecution1FinishEnd(CheckOutService CheckOutSSDExecution1)
		MessageEnd::CheckOutSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage1Return)
		MessageEnd::CheckOutSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage3)
		ExecutionEnd::CheckOutSSDExecution2StartEnd(CheckOutService CheckOutSSDExecution2)
		ExecutionEnd::CheckOutSSDExecution2FinishEnd(CheckOutService CheckOutSSDExecution2)
		MessageEnd::CheckOutSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage3Return)
		MessageEnd::CheckOutSSDCallMessage5SendingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage5)
		ExecutionEnd::CheckOutSSDExecution3StartEnd(CheckOutService CheckOutSSDExecution3)
		ExecutionEnd::CheckOutSSDExecution3FinishEnd(CheckOutService CheckOutSSDExecution3)
		MessageEnd::CheckOutSSDCallMessage5ReturnReceivingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage5Return)
		MessageEnd::CheckOutSSDCallMessage7SendingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage7)
		ExecutionEnd::CheckOutSSDExecution4StartEnd(CheckOutService CheckOutSSDExecution4)
		ExecutionEnd::CheckOutSSDExecution4FinishEnd(CheckOutService CheckOutSSDExecution4)
		MessageEnd::CheckOutSSDCallMessage7ReturnReceivingEnd(CustomerOrLoyaltyMember CheckOutSSDCallMessage7Return)

	}

	Interaction ReturnProductSSD {

		[Participants: CustomerOrLoyaltyMember ReturnProductService]

		CallMessage::ReturnProductSSDCallMessage1(getTransactionID ReturnProductSSDCallMessage1SendingEnd -> ReturnProductSSDExecution1StartEnd)
		ReturnMessage::ReturnProductSSDCallMessage1Return(ReturnProductSSDExecution1FinishEnd -> ReturnProductSSDCallMessage1ReturnReceivingEnd ReturnProductSSDCallMessage1)
		CallMessage::ReturnProductSSDCallMessage3(productID ReturnProductSSDCallMessage3SendingEnd -> ReturnProductSSDExecution2StartEnd)
		ReturnMessage::ReturnProductSSDCallMessage3Return(ReturnProductSSDExecution2FinishEnd -> ReturnProductSSDCallMessage3ReturnReceivingEnd ReturnProductSSDCallMessage3)
		CallMessage::ReturnProductSSDCallMessage5(getReason ReturnProductSSDCallMessage5SendingEnd -> ReturnProductSSDExecution3StartEnd)
		ReturnMessage::ReturnProductSSDCallMessage5Return(ReturnProductSSDExecution3FinishEnd -> ReturnProductSSDCallMessage5ReturnReceivingEnd ReturnProductSSDCallMessage5)
		CallMessage::ReturnProductSSDCallMessage7(saveReturn ReturnProductSSDCallMessage7SendingEnd -> ReturnProductSSDExecution4StartEnd)
		ReturnMessage::ReturnProductSSDCallMessage7Return(ReturnProductSSDExecution4FinishEnd -> ReturnProductSSDCallMessage7ReturnReceivingEnd ReturnProductSSDCallMessage7)

		Execution::ReturnProductSSDExecution1(ReturnProductService ReturnProductSSDExecution1StartEnd ReturnProductSSDExecution1FinishEnd)
		Execution::ReturnProductSSDExecution2(ReturnProductService ReturnProductSSDExecution2StartEnd ReturnProductSSDExecution2FinishEnd)
		Execution::ReturnProductSSDExecution3(ReturnProductService ReturnProductSSDExecution3StartEnd ReturnProductSSDExecution3FinishEnd)
		Execution::ReturnProductSSDExecution4(ReturnProductService ReturnProductSSDExecution4StartEnd ReturnProductSSDExecution4FinishEnd)

		MessageEnd::ReturnProductSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage1)
		ExecutionEnd::ReturnProductSSDExecution1StartEnd(ReturnProductService ReturnProductSSDExecution1)
		ExecutionEnd::ReturnProductSSDExecution1FinishEnd(ReturnProductService ReturnProductSSDExecution1)
		MessageEnd::ReturnProductSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage1Return)
		MessageEnd::ReturnProductSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage3)
		ExecutionEnd::ReturnProductSSDExecution2StartEnd(ReturnProductService ReturnProductSSDExecution2)
		ExecutionEnd::ReturnProductSSDExecution2FinishEnd(ReturnProductService ReturnProductSSDExecution2)
		MessageEnd::ReturnProductSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage3Return)
		MessageEnd::ReturnProductSSDCallMessage5SendingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage5)
		ExecutionEnd::ReturnProductSSDExecution3StartEnd(ReturnProductService ReturnProductSSDExecution3)
		ExecutionEnd::ReturnProductSSDExecution3FinishEnd(ReturnProductService ReturnProductSSDExecution3)
		MessageEnd::ReturnProductSSDCallMessage5ReturnReceivingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage5Return)
		MessageEnd::ReturnProductSSDCallMessage7SendingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage7)
		ExecutionEnd::ReturnProductSSDExecution4StartEnd(ReturnProductService ReturnProductSSDExecution4)
		ExecutionEnd::ReturnProductSSDExecution4FinishEnd(ReturnProductService ReturnProductSSDExecution4)
		MessageEnd::ReturnProductSSDCallMessage7ReturnReceivingEnd(CustomerOrLoyaltyMember ReturnProductSSDCallMessage7Return)

	}

	Interaction ReviewCartSSD {

		[Participants: CustomerOrLoyaltyMember ReviewCartService]

		CallMessage::ReviewCartSSDCallMessage1(reviewCart ReviewCartSSDCallMessage1SendingEnd -> ReviewCartSSDExecution1StartEnd)
		ReturnMessage::ReviewCartSSDCallMessage1Return(ReviewCartSSDExecution1FinishEnd -> ReviewCartSSDCallMessage1ReturnReceivingEnd ReviewCartSSDCallMessage1)

		Execution::ReviewCartSSDExecution1(ReviewCartService ReviewCartSSDExecution1StartEnd ReviewCartSSDExecution1FinishEnd)

		MessageEnd::ReviewCartSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember ReviewCartSSDCallMessage1)
		ExecutionEnd::ReviewCartSSDExecution1StartEnd(ReviewCartService ReviewCartSSDExecution1)
		ExecutionEnd::ReviewCartSSDExecution1FinishEnd(ReviewCartService ReviewCartSSDExecution1)
		MessageEnd::ReviewCartSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember ReviewCartSSDCallMessage1Return)

	}

	Interaction ModifyCartSSD {

		[Participants: CustomerOrLoyaltyMember ModifyCartService]

		CallMessage::ModifyCartSSDCallMessage1(modifyCart ModifyCartSSDCallMessage1SendingEnd -> ModifyCartSSDExecution1StartEnd)
		ReturnMessage::ModifyCartSSDCallMessage1Return(ModifyCartSSDExecution1FinishEnd -> ModifyCartSSDCallMessage1ReturnReceivingEnd ModifyCartSSDCallMessage1)

		Execution::ModifyCartSSDExecution1(ModifyCartService ModifyCartSSDExecution1StartEnd ModifyCartSSDExecution1FinishEnd)

		MessageEnd::ModifyCartSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember ModifyCartSSDCallMessage1)
		ExecutionEnd::ModifyCartSSDExecution1StartEnd(ModifyCartService ModifyCartSSDExecution1)
		ExecutionEnd::ModifyCartSSDExecution1FinishEnd(ModifyCartService ModifyCartSSDExecution1)
		MessageEnd::ModifyCartSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember ModifyCartSSDCallMessage1Return)

	}

	Interaction GiveFeedbackSSD {

		[Participants: CustomerOrLoyaltyMember GiveFeedbackService]

		CallMessage::GiveFeedbackSSDCallMessage1(giveFeedback GiveFeedbackSSDCallMessage1SendingEnd -> GiveFeedbackSSDExecution1StartEnd)
		ReturnMessage::GiveFeedbackSSDCallMessage1Return(GiveFeedbackSSDExecution1FinishEnd -> GiveFeedbackSSDCallMessage1ReturnReceivingEnd GiveFeedbackSSDCallMessage1)
		CallMessage::GiveFeedbackSSDCallMessage3(saveFeedback GiveFeedbackSSDCallMessage3SendingEnd -> GiveFeedbackSSDExecution2StartEnd)
		ReturnMessage::GiveFeedbackSSDCallMessage3Return(GiveFeedbackSSDExecution2FinishEnd -> GiveFeedbackSSDCallMessage3ReturnReceivingEnd GiveFeedbackSSDCallMessage3)

		Execution::GiveFeedbackSSDExecution1(GiveFeedbackService GiveFeedbackSSDExecution1StartEnd GiveFeedbackSSDExecution1FinishEnd)
		Execution::GiveFeedbackSSDExecution2(GiveFeedbackService GiveFeedbackSSDExecution2StartEnd GiveFeedbackSSDExecution2FinishEnd)

		MessageEnd::GiveFeedbackSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember GiveFeedbackSSDCallMessage1)
		ExecutionEnd::GiveFeedbackSSDExecution1StartEnd(GiveFeedbackService GiveFeedbackSSDExecution1)
		ExecutionEnd::GiveFeedbackSSDExecution1FinishEnd(GiveFeedbackService GiveFeedbackSSDExecution1)
		MessageEnd::GiveFeedbackSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember GiveFeedbackSSDCallMessage1Return)
		MessageEnd::GiveFeedbackSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember GiveFeedbackSSDCallMessage3)
		ExecutionEnd::GiveFeedbackSSDExecution2StartEnd(GiveFeedbackService GiveFeedbackSSDExecution2)
		ExecutionEnd::GiveFeedbackSSDExecution2FinishEnd(GiveFeedbackService GiveFeedbackSSDExecution2)
		MessageEnd::GiveFeedbackSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember GiveFeedbackSSDCallMessage3Return)

	}

	Interaction MembershipStatusSSD {

		[Participants: CustomerOrLoyaltyMember MembershipStatusService]

		CallMessage::MembershipStatusSSDCallMessage1(getMembershipStatus MembershipStatusSSDCallMessage1SendingEnd -> MembershipStatusSSDExecution1StartEnd)
		ReturnMessage::MembershipStatusSSDCallMessage1Return(MembershipStatusSSDExecution1FinishEnd -> MembershipStatusSSDCallMessage1ReturnReceivingEnd MembershipStatusSSDCallMessage1)
		CallMessage::MembershipStatusSSDCallMessage3(showCurrentStatus MembershipStatusSSDCallMessage3SendingEnd -> MembershipStatusSSDExecution2StartEnd)
		ReturnMessage::MembershipStatusSSDCallMessage3Return(MembershipStatusSSDExecution2FinishEnd -> MembershipStatusSSDCallMessage3ReturnReceivingEnd MembershipStatusSSDCallMessage3)

		Execution::MembershipStatusSSDExecution1(MembershipStatusService MembershipStatusSSDExecution1StartEnd MembershipStatusSSDExecution1FinishEnd)
		Execution::MembershipStatusSSDExecution2(MembershipStatusService MembershipStatusSSDExecution2StartEnd MembershipStatusSSDExecution2FinishEnd)

		MessageEnd::MembershipStatusSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember MembershipStatusSSDCallMessage1)
		ExecutionEnd::MembershipStatusSSDExecution1StartEnd(MembershipStatusService MembershipStatusSSDExecution1)
		ExecutionEnd::MembershipStatusSSDExecution1FinishEnd(MembershipStatusService MembershipStatusSSDExecution1)
		MessageEnd::MembershipStatusSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember MembershipStatusSSDCallMessage1Return)
		MessageEnd::MembershipStatusSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember MembershipStatusSSDCallMessage3)
		ExecutionEnd::MembershipStatusSSDExecution2StartEnd(MembershipStatusService MembershipStatusSSDExecution2)
		ExecutionEnd::MembershipStatusSSDExecution2FinishEnd(MembershipStatusService MembershipStatusSSDExecution2)
		MessageEnd::MembershipStatusSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember MembershipStatusSSDCallMessage3Return)

	}

	Interaction ScanProductsSSD {

		[Participants: Cashier ScanProductsService]

		CallMessage::ScanProductsSSDCallMessage1(scanProducts ScanProductsSSDCallMessage1SendingEnd -> ScanProductsSSDExecution1StartEnd)
		ReturnMessage::ScanProductsSSDCallMessage1Return(ScanProductsSSDExecution1FinishEnd -> ScanProductsSSDCallMessage1ReturnReceivingEnd ScanProductsSSDCallMessage1)
		CallMessage::ScanProductsSSDCallMessage3(updateCart ScanProductsSSDCallMessage3SendingEnd -> ScanProductsSSDExecution2StartEnd)
		ReturnMessage::ScanProductsSSDCallMessage3Return(ScanProductsSSDExecution2FinishEnd -> ScanProductsSSDCallMessage3ReturnReceivingEnd ScanProductsSSDCallMessage3)

		Execution::ScanProductsSSDExecution1(ScanProductsService ScanProductsSSDExecution1StartEnd ScanProductsSSDExecution1FinishEnd)
		Execution::ScanProductsSSDExecution2(ScanProductsService ScanProductsSSDExecution2StartEnd ScanProductsSSDExecution2FinishEnd)

		MessageEnd::ScanProductsSSDCallMessage1SendingEnd(Cashier ScanProductsSSDCallMessage1)
		ExecutionEnd::ScanProductsSSDExecution1StartEnd(ScanProductsService ScanProductsSSDExecution1)
		ExecutionEnd::ScanProductsSSDExecution1FinishEnd(ScanProductsService ScanProductsSSDExecution1)
		MessageEnd::ScanProductsSSDCallMessage1ReturnReceivingEnd(Cashier ScanProductsSSDCallMessage1Return)
		MessageEnd::ScanProductsSSDCallMessage3SendingEnd(Cashier ScanProductsSSDCallMessage3)
		ExecutionEnd::ScanProductsSSDExecution2StartEnd(ScanProductsService ScanProductsSSDExecution2)
		ExecutionEnd::ScanProductsSSDExecution2FinishEnd(ScanProductsService ScanProductsSSDExecution2)
		MessageEnd::ScanProductsSSDCallMessage3ReturnReceivingEnd(Cashier ScanProductsSSDCallMessage3Return)

	}

	Interaction ProcessPaymentSSD {

		[Participants: Cashier ProcessPaymentService]

		CallMessage::ProcessPaymentSSDCallMessage1(paymentProcess ProcessPaymentSSDCallMessage1SendingEnd -> ProcessPaymentSSDExecution1StartEnd)
		ReturnMessage::ProcessPaymentSSDCallMessage1Return(ProcessPaymentSSDExecution1FinishEnd -> ProcessPaymentSSDCallMessage1ReturnReceivingEnd ProcessPaymentSSDCallMessage1)
		CallMessage::ProcessPaymentSSDCallMessage3(addLoyaltyPoints ProcessPaymentSSDCallMessage3SendingEnd -> ProcessPaymentSSDExecution2StartEnd)
		ReturnMessage::ProcessPaymentSSDCallMessage3Return(ProcessPaymentSSDExecution2FinishEnd -> ProcessPaymentSSDCallMessage3ReturnReceivingEnd ProcessPaymentSSDCallMessage3)

		Execution::ProcessPaymentSSDExecution1(ProcessPaymentService ProcessPaymentSSDExecution1StartEnd ProcessPaymentSSDExecution1FinishEnd)
		Execution::ProcessPaymentSSDExecution2(ProcessPaymentService ProcessPaymentSSDExecution2StartEnd ProcessPaymentSSDExecution2FinishEnd)

		MessageEnd::ProcessPaymentSSDCallMessage1SendingEnd(Cashier ProcessPaymentSSDCallMessage1)
		ExecutionEnd::ProcessPaymentSSDExecution1StartEnd(ProcessPaymentService ProcessPaymentSSDExecution1)
		ExecutionEnd::ProcessPaymentSSDExecution1FinishEnd(ProcessPaymentService ProcessPaymentSSDExecution1)
		MessageEnd::ProcessPaymentSSDCallMessage1ReturnReceivingEnd(Cashier ProcessPaymentSSDCallMessage1Return)
		MessageEnd::ProcessPaymentSSDCallMessage3SendingEnd(Cashier ProcessPaymentSSDCallMessage3)
		ExecutionEnd::ProcessPaymentSSDExecution2StartEnd(ProcessPaymentService ProcessPaymentSSDExecution2)
		ExecutionEnd::ProcessPaymentSSDExecution2FinishEnd(ProcessPaymentService ProcessPaymentSSDExecution2)
		MessageEnd::ProcessPaymentSSDCallMessage3ReturnReceivingEnd(Cashier ProcessPaymentSSDCallMessage3Return)

	}

	Interaction ProcessReturnSSD {

		[Participants: Cashier ProcessReturnService]

		CallMessage::ProcessReturnSSDCallMessage1(getCustomerID ProcessReturnSSDCallMessage1SendingEnd -> ProcessReturnSSDExecution1StartEnd)
		ReturnMessage::ProcessReturnSSDCallMessage1Return(ProcessReturnSSDExecution1FinishEnd -> ProcessReturnSSDCallMessage1ReturnReceivingEnd ProcessReturnSSDCallMessage1)

		Execution::ProcessReturnSSDExecution1(ProcessReturnService ProcessReturnSSDExecution1StartEnd ProcessReturnSSDExecution1FinishEnd)

		MessageEnd::ProcessReturnSSDCallMessage1SendingEnd(Cashier ProcessReturnSSDCallMessage1)
		ExecutionEnd::ProcessReturnSSDExecution1StartEnd(ProcessReturnService ProcessReturnSSDExecution1)
		ExecutionEnd::ProcessReturnSSDExecution1FinishEnd(ProcessReturnService ProcessReturnSSDExecution1)
		MessageEnd::ProcessReturnSSDCallMessage1ReturnReceivingEnd(Cashier ProcessReturnSSDCallMessage1Return)

	}

	Interaction PrintReceiptSSD {

		[Participants: Cashier PrintReceiptService]

		CallMessage::PrintReceiptSSDCallMessage1(getUserDetails PrintReceiptSSDCallMessage1SendingEnd -> PrintReceiptSSDExecution1StartEnd)
		ReturnMessage::PrintReceiptSSDCallMessage1Return(PrintReceiptSSDExecution1FinishEnd -> PrintReceiptSSDCallMessage1ReturnReceivingEnd PrintReceiptSSDCallMessage1)
		CallMessage::PrintReceiptSSDCallMessage3(printReciept PrintReceiptSSDCallMessage3SendingEnd -> PrintReceiptSSDExecution2StartEnd)
		ReturnMessage::PrintReceiptSSDCallMessage3Return(PrintReceiptSSDExecution2FinishEnd -> PrintReceiptSSDCallMessage3ReturnReceivingEnd PrintReceiptSSDCallMessage3)

		Execution::PrintReceiptSSDExecution1(PrintReceiptService PrintReceiptSSDExecution1StartEnd PrintReceiptSSDExecution1FinishEnd)
		Execution::PrintReceiptSSDExecution2(PrintReceiptService PrintReceiptSSDExecution2StartEnd PrintReceiptSSDExecution2FinishEnd)

		MessageEnd::PrintReceiptSSDCallMessage1SendingEnd(Cashier PrintReceiptSSDCallMessage1)
		ExecutionEnd::PrintReceiptSSDExecution1StartEnd(PrintReceiptService PrintReceiptSSDExecution1)
		ExecutionEnd::PrintReceiptSSDExecution1FinishEnd(PrintReceiptService PrintReceiptSSDExecution1)
		MessageEnd::PrintReceiptSSDCallMessage1ReturnReceivingEnd(Cashier PrintReceiptSSDCallMessage1Return)
		MessageEnd::PrintReceiptSSDCallMessage3SendingEnd(Cashier PrintReceiptSSDCallMessage3)
		ExecutionEnd::PrintReceiptSSDExecution2StartEnd(PrintReceiptService PrintReceiptSSDExecution2)
		ExecutionEnd::PrintReceiptSSDExecution2FinishEnd(PrintReceiptService PrintReceiptSSDExecution2)
		MessageEnd::PrintReceiptSSDCallMessage3ReturnReceivingEnd(Cashier PrintReceiptSSDCallMessage3Return)

	}

	Interaction PaymentValidationSSD {

		[Participants: CustomerOrLoyaltyMember PaymentValidationService]

		CallMessage::PaymentValidationSSDCallMessage1(processingUserPayment PaymentValidationSSDCallMessage1SendingEnd -> PaymentValidationSSDExecution1StartEnd)
		ReturnMessage::PaymentValidationSSDCallMessage1Return(PaymentValidationSSDExecution1FinishEnd -> PaymentValidationSSDCallMessage1ReturnReceivingEnd PaymentValidationSSDCallMessage1)
		CallMessage::PaymentValidationSSDCallMessage3(bankContactandAuthorization PaymentValidationSSDCallMessage3SendingEnd -> PaymentValidationSSDExecution2StartEnd)
		ReturnMessage::PaymentValidationSSDCallMessage3Return(PaymentValidationSSDExecution2FinishEnd -> PaymentValidationSSDCallMessage3ReturnReceivingEnd PaymentValidationSSDCallMessage3)

		Execution::PaymentValidationSSDExecution1(PaymentValidationService PaymentValidationSSDExecution1StartEnd PaymentValidationSSDExecution1FinishEnd)
		Execution::PaymentValidationSSDExecution2(PaymentValidationService PaymentValidationSSDExecution2StartEnd PaymentValidationSSDExecution2FinishEnd)

		MessageEnd::PaymentValidationSSDCallMessage1SendingEnd(CustomerOrLoyaltyMember PaymentValidationSSDCallMessage1)
		ExecutionEnd::PaymentValidationSSDExecution1StartEnd(PaymentValidationService PaymentValidationSSDExecution1)
		ExecutionEnd::PaymentValidationSSDExecution1FinishEnd(PaymentValidationService PaymentValidationSSDExecution1)
		MessageEnd::PaymentValidationSSDCallMessage1ReturnReceivingEnd(CustomerOrLoyaltyMember PaymentValidationSSDCallMessage1Return)
		MessageEnd::PaymentValidationSSDCallMessage3SendingEnd(CustomerOrLoyaltyMember PaymentValidationSSDCallMessage3)
		ExecutionEnd::PaymentValidationSSDExecution2StartEnd(PaymentValidationService PaymentValidationSSDExecution2)
		ExecutionEnd::PaymentValidationSSDExecution2FinishEnd(PaymentValidationService PaymentValidationSSDExecution2)
		MessageEnd::PaymentValidationSSDCallMessage3ReturnReceivingEnd(CustomerOrLoyaltyMember PaymentValidationSSDCallMessage3Return)

	}

	Interaction InStorePaymentValidationSSD {

		[Participants: Cashier InStorePaymentValidationService]

		CallMessage::InStorePaymentValidationSSDCallMessage1(processingInStoreUserPayment InStorePaymentValidationSSDCallMessage1SendingEnd -> InStorePaymentValidationSSDExecution1StartEnd)
		ReturnMessage::InStorePaymentValidationSSDCallMessage1Return(InStorePaymentValidationSSDExecution1FinishEnd -> InStorePaymentValidationSSDCallMessage1ReturnReceivingEnd InStorePaymentValidationSSDCallMessage1)
		CallMessage::InStorePaymentValidationSSDCallMessage3(bankContactandAuthorizationInStore InStorePaymentValidationSSDCallMessage3SendingEnd -> InStorePaymentValidationSSDExecution2StartEnd)
		ReturnMessage::InStorePaymentValidationSSDCallMessage3Return(InStorePaymentValidationSSDExecution2FinishEnd -> InStorePaymentValidationSSDCallMessage3ReturnReceivingEnd InStorePaymentValidationSSDCallMessage3)
		CallMessage::InStorePaymentValidationSSDCallMessage5(cashPayment InStorePaymentValidationSSDCallMessage5SendingEnd -> InStorePaymentValidationSSDExecution3StartEnd)
		ReturnMessage::InStorePaymentValidationSSDCallMessage5Return(InStorePaymentValidationSSDExecution3FinishEnd -> InStorePaymentValidationSSDCallMessage5ReturnReceivingEnd InStorePaymentValidationSSDCallMessage5)

		Execution::InStorePaymentValidationSSDExecution1(InStorePaymentValidationService InStorePaymentValidationSSDExecution1StartEnd InStorePaymentValidationSSDExecution1FinishEnd)
		Execution::InStorePaymentValidationSSDExecution2(InStorePaymentValidationService InStorePaymentValidationSSDExecution2StartEnd InStorePaymentValidationSSDExecution2FinishEnd)
		Execution::InStorePaymentValidationSSDExecution3(InStorePaymentValidationService InStorePaymentValidationSSDExecution3StartEnd InStorePaymentValidationSSDExecution3FinishEnd)

		MessageEnd::InStorePaymentValidationSSDCallMessage1SendingEnd(Cashier InStorePaymentValidationSSDCallMessage1)
		ExecutionEnd::InStorePaymentValidationSSDExecution1StartEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution1)
		ExecutionEnd::InStorePaymentValidationSSDExecution1FinishEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution1)
		MessageEnd::InStorePaymentValidationSSDCallMessage1ReturnReceivingEnd(Cashier InStorePaymentValidationSSDCallMessage1Return)
		MessageEnd::InStorePaymentValidationSSDCallMessage3SendingEnd(Cashier InStorePaymentValidationSSDCallMessage3)
		ExecutionEnd::InStorePaymentValidationSSDExecution2StartEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution2)
		ExecutionEnd::InStorePaymentValidationSSDExecution2FinishEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution2)
		MessageEnd::InStorePaymentValidationSSDCallMessage3ReturnReceivingEnd(Cashier InStorePaymentValidationSSDCallMessage3Return)
		MessageEnd::InStorePaymentValidationSSDCallMessage5SendingEnd(Cashier InStorePaymentValidationSSDCallMessage5)
		ExecutionEnd::InStorePaymentValidationSSDExecution3StartEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution3)
		ExecutionEnd::InStorePaymentValidationSSDExecution3FinishEnd(InStorePaymentValidationService InStorePaymentValidationSSDExecution3)
		MessageEnd::InStorePaymentValidationSSDCallMessage5ReturnReceivingEnd(Cashier InStorePaymentValidationSSDCallMessage5Return)

	}

	Interaction ViewReportsSSD {

		[Participants: StoreManager ViewReportsService]

		CallMessage::ViewReportsSSDCallMessage1(viewAllReports ViewReportsSSDCallMessage1SendingEnd -> ViewReportsSSDExecution1StartEnd)
		ReturnMessage::ViewReportsSSDCallMessage1Return(ViewReportsSSDExecution1FinishEnd -> ViewReportsSSDCallMessage1ReturnReceivingEnd ViewReportsSSDCallMessage1)
		CallMessage::ViewReportsSSDCallMessage3(getReportType ViewReportsSSDCallMessage3SendingEnd -> ViewReportsSSDExecution2StartEnd)
		ReturnMessage::ViewReportsSSDCallMessage3Return(ViewReportsSSDExecution2FinishEnd -> ViewReportsSSDCallMessage3ReturnReceivingEnd ViewReportsSSDCallMessage3)
		CallMessage::ViewReportsSSDCallMessage5(generateReport ViewReportsSSDCallMessage5SendingEnd -> ViewReportsSSDExecution3StartEnd)
		ReturnMessage::ViewReportsSSDCallMessage5Return(ViewReportsSSDExecution3FinishEnd -> ViewReportsSSDCallMessage5ReturnReceivingEnd ViewReportsSSDCallMessage5)

		Execution::ViewReportsSSDExecution1(ViewReportsService ViewReportsSSDExecution1StartEnd ViewReportsSSDExecution1FinishEnd)
		Execution::ViewReportsSSDExecution2(ViewReportsService ViewReportsSSDExecution2StartEnd ViewReportsSSDExecution2FinishEnd)
		Execution::ViewReportsSSDExecution3(ViewReportsService ViewReportsSSDExecution3StartEnd ViewReportsSSDExecution3FinishEnd)

		MessageEnd::ViewReportsSSDCallMessage1SendingEnd(StoreManager ViewReportsSSDCallMessage1)
		ExecutionEnd::ViewReportsSSDExecution1StartEnd(ViewReportsService ViewReportsSSDExecution1)
		ExecutionEnd::ViewReportsSSDExecution1FinishEnd(ViewReportsService ViewReportsSSDExecution1)
		MessageEnd::ViewReportsSSDCallMessage1ReturnReceivingEnd(StoreManager ViewReportsSSDCallMessage1Return)
		MessageEnd::ViewReportsSSDCallMessage3SendingEnd(StoreManager ViewReportsSSDCallMessage3)
		ExecutionEnd::ViewReportsSSDExecution2StartEnd(ViewReportsService ViewReportsSSDExecution2)
		ExecutionEnd::ViewReportsSSDExecution2FinishEnd(ViewReportsService ViewReportsSSDExecution2)
		MessageEnd::ViewReportsSSDCallMessage3ReturnReceivingEnd(StoreManager ViewReportsSSDCallMessage3Return)
		MessageEnd::ViewReportsSSDCallMessage5SendingEnd(StoreManager ViewReportsSSDCallMessage5)
		ExecutionEnd::ViewReportsSSDExecution3StartEnd(ViewReportsService ViewReportsSSDExecution3)
		ExecutionEnd::ViewReportsSSDExecution3FinishEnd(ViewReportsService ViewReportsSSDExecution3)
		MessageEnd::ViewReportsSSDCallMessage5ReturnReceivingEnd(StoreManager ViewReportsSSDCallMessage5Return)

	}

	Interaction ManageInventorySSD {

		[Participants: StoreManager ManageInventoryService]

		CallMessage::ManageInventorySSDCallMessage1(viewInventoryStockLevel ManageInventorySSDCallMessage1SendingEnd -> ManageInventorySSDExecution1StartEnd)
		ReturnMessage::ManageInventorySSDCallMessage1Return(ManageInventorySSDExecution1FinishEnd -> ManageInventorySSDCallMessage1ReturnReceivingEnd ManageInventorySSDCallMessage1)
		CallMessage::ManageInventorySSDCallMessage3(recordRestock ManageInventorySSDCallMessage3SendingEnd -> ManageInventorySSDExecution2StartEnd)
		ReturnMessage::ManageInventorySSDCallMessage3Return(ManageInventorySSDExecution2FinishEnd -> ManageInventorySSDCallMessage3ReturnReceivingEnd ManageInventorySSDCallMessage3)
		CallMessage::ManageInventorySSDCallMessage5(sendToSupplier ManageInventorySSDCallMessage5SendingEnd -> ManageInventorySSDExecution3StartEnd)
		ReturnMessage::ManageInventorySSDCallMessage5Return(ManageInventorySSDExecution3FinishEnd -> ManageInventorySSDCallMessage5ReturnReceivingEnd ManageInventorySSDCallMessage5)
		CallMessage::ManageInventorySSDCallMessage7(orderStockProducts ManageInventorySSDCallMessage7SendingEnd -> ManageInventorySSDExecution4StartEnd)
		ReturnMessage::ManageInventorySSDCallMessage7Return(ManageInventorySSDExecution4FinishEnd -> ManageInventorySSDCallMessage7ReturnReceivingEnd ManageInventorySSDCallMessage7)
		CallMessage::ManageInventorySSDCallMessage9(creatingNewSupplier ManageInventorySSDCallMessage9SendingEnd -> ManageInventorySSDExecution5StartEnd)
		ReturnMessage::ManageInventorySSDCallMessage9Return(ManageInventorySSDExecution5FinishEnd -> ManageInventorySSDCallMessage9ReturnReceivingEnd ManageInventorySSDCallMessage9)

		Execution::ManageInventorySSDExecution1(ManageInventoryService ManageInventorySSDExecution1StartEnd ManageInventorySSDExecution1FinishEnd)
		Execution::ManageInventorySSDExecution2(ManageInventoryService ManageInventorySSDExecution2StartEnd ManageInventorySSDExecution2FinishEnd)
		Execution::ManageInventorySSDExecution3(ManageInventoryService ManageInventorySSDExecution3StartEnd ManageInventorySSDExecution3FinishEnd)
		Execution::ManageInventorySSDExecution4(ManageInventoryService ManageInventorySSDExecution4StartEnd ManageInventorySSDExecution4FinishEnd)
		Execution::ManageInventorySSDExecution5(ManageInventoryService ManageInventorySSDExecution5StartEnd ManageInventorySSDExecution5FinishEnd)

		MessageEnd::ManageInventorySSDCallMessage1SendingEnd(StoreManager ManageInventorySSDCallMessage1)
		ExecutionEnd::ManageInventorySSDExecution1StartEnd(ManageInventoryService ManageInventorySSDExecution1)
		ExecutionEnd::ManageInventorySSDExecution1FinishEnd(ManageInventoryService ManageInventorySSDExecution1)
		MessageEnd::ManageInventorySSDCallMessage1ReturnReceivingEnd(StoreManager ManageInventorySSDCallMessage1Return)
		MessageEnd::ManageInventorySSDCallMessage3SendingEnd(StoreManager ManageInventorySSDCallMessage3)
		ExecutionEnd::ManageInventorySSDExecution2StartEnd(ManageInventoryService ManageInventorySSDExecution2)
		ExecutionEnd::ManageInventorySSDExecution2FinishEnd(ManageInventoryService ManageInventorySSDExecution2)
		MessageEnd::ManageInventorySSDCallMessage3ReturnReceivingEnd(StoreManager ManageInventorySSDCallMessage3Return)
		MessageEnd::ManageInventorySSDCallMessage9SendingEnd(StoreManager ManageInventorySSDCallMessage9)
		ExecutionEnd::ManageInventorySSDExecution5StartEnd(ManageInventoryService ManageInventorySSDExecution5)
		ExecutionEnd::ManageInventorySSDExecution5FinishEnd(ManageInventoryService ManageInventorySSDExecution5)
		MessageEnd::ManageInventorySSDCallMessage9ReturnReceivingEnd(StoreManager ManageInventorySSDCallMessage9Return)
		MessageEnd::ManageInventorySSDCallMessage5SendingEnd(StoreManager ManageInventorySSDCallMessage5)
		ExecutionEnd::ManageInventorySSDExecution3StartEnd(ManageInventoryService ManageInventorySSDExecution3)
		ExecutionEnd::ManageInventorySSDExecution3FinishEnd(ManageInventoryService ManageInventorySSDExecution3)
		MessageEnd::ManageInventorySSDCallMessage5ReturnReceivingEnd(StoreManager ManageInventorySSDCallMessage5Return)
		MessageEnd::ManageInventorySSDCallMessage7SendingEnd(StoreManager ManageInventorySSDCallMessage7)
		ExecutionEnd::ManageInventorySSDExecution4StartEnd(ManageInventoryService ManageInventorySSDExecution4)
		ExecutionEnd::ManageInventorySSDExecution4FinishEnd(ManageInventoryService ManageInventorySSDExecution4)
		MessageEnd::ManageInventorySSDCallMessage7ReturnReceivingEnd(StoreManager ManageInventorySSDCallMessage7Return)

	}

	Interaction AccessFeedbackSSD {

		[Participants: StoreManager AccessFeedbackService]

		CallMessage::AccessFeedbackSSDCallMessage1(viewAllFeedback AccessFeedbackSSDCallMessage1SendingEnd -> AccessFeedbackSSDExecution1StartEnd)
		ReturnMessage::AccessFeedbackSSDCallMessage1Return(AccessFeedbackSSDExecution1FinishEnd -> AccessFeedbackSSDCallMessage1ReturnReceivingEnd AccessFeedbackSSDCallMessage1)
		CallMessage::AccessFeedbackSSDCallMessage3(handleFeedback AccessFeedbackSSDCallMessage3SendingEnd -> AccessFeedbackSSDExecution2StartEnd)
		ReturnMessage::AccessFeedbackSSDCallMessage3Return(AccessFeedbackSSDExecution2FinishEnd -> AccessFeedbackSSDCallMessage3ReturnReceivingEnd AccessFeedbackSSDCallMessage3)
		CallMessage::AccessFeedbackSSDCallMessage5(immediateAction AccessFeedbackSSDCallMessage5SendingEnd -> AccessFeedbackSSDExecution3StartEnd)
		ReturnMessage::AccessFeedbackSSDCallMessage5Return(AccessFeedbackSSDExecution3FinishEnd -> AccessFeedbackSSDCallMessage5ReturnReceivingEnd AccessFeedbackSSDCallMessage5)

		Execution::AccessFeedbackSSDExecution1(AccessFeedbackService AccessFeedbackSSDExecution1StartEnd AccessFeedbackSSDExecution1FinishEnd)
		Execution::AccessFeedbackSSDExecution2(AccessFeedbackService AccessFeedbackSSDExecution2StartEnd AccessFeedbackSSDExecution2FinishEnd)
		Execution::AccessFeedbackSSDExecution3(AccessFeedbackService AccessFeedbackSSDExecution3StartEnd AccessFeedbackSSDExecution3FinishEnd)

		MessageEnd::AccessFeedbackSSDCallMessage1SendingEnd(StoreManager AccessFeedbackSSDCallMessage1)
		ExecutionEnd::AccessFeedbackSSDExecution1StartEnd(AccessFeedbackService AccessFeedbackSSDExecution1)
		ExecutionEnd::AccessFeedbackSSDExecution1FinishEnd(AccessFeedbackService AccessFeedbackSSDExecution1)
		MessageEnd::AccessFeedbackSSDCallMessage1ReturnReceivingEnd(StoreManager AccessFeedbackSSDCallMessage1Return)
		MessageEnd::AccessFeedbackSSDCallMessage3SendingEnd(StoreManager AccessFeedbackSSDCallMessage3)
		ExecutionEnd::AccessFeedbackSSDExecution2StartEnd(AccessFeedbackService AccessFeedbackSSDExecution2)
		ExecutionEnd::AccessFeedbackSSDExecution2FinishEnd(AccessFeedbackService AccessFeedbackSSDExecution2)
		MessageEnd::AccessFeedbackSSDCallMessage3ReturnReceivingEnd(StoreManager AccessFeedbackSSDCallMessage3Return)
		MessageEnd::AccessFeedbackSSDCallMessage5SendingEnd(StoreManager AccessFeedbackSSDCallMessage5)
		ExecutionEnd::AccessFeedbackSSDExecution3StartEnd(AccessFeedbackService AccessFeedbackSSDExecution3)
		ExecutionEnd::AccessFeedbackSSDExecution3FinishEnd(AccessFeedbackService AccessFeedbackSSDExecution3)
		MessageEnd::AccessFeedbackSSDCallMessage5ReturnReceivingEnd(StoreManager AccessFeedbackSSDCallMessage5Return)

	}

	Interaction ProcessOrdersSSD {

		[Participants: Supplier ProcessOrdersService]

		CallMessage::ProcessOrdersSSDCallMessage1(processStoreOrder ProcessOrdersSSDCallMessage1SendingEnd -> ProcessOrdersSSDExecution1StartEnd)
		ReturnMessage::ProcessOrdersSSDCallMessage1Return(ProcessOrdersSSDExecution1FinishEnd -> ProcessOrdersSSDCallMessage1ReturnReceivingEnd ProcessOrdersSSDCallMessage1)
		CallMessage::ProcessOrdersSSDCallMessage3(provideDeliveryInfo ProcessOrdersSSDCallMessage3SendingEnd -> ProcessOrdersSSDExecution2StartEnd)
		ReturnMessage::ProcessOrdersSSDCallMessage3Return(ProcessOrdersSSDExecution2FinishEnd -> ProcessOrdersSSDCallMessage3ReturnReceivingEnd ProcessOrdersSSDCallMessage3)

		Execution::ProcessOrdersSSDExecution1(ProcessOrdersService ProcessOrdersSSDExecution1StartEnd ProcessOrdersSSDExecution1FinishEnd)
		Execution::ProcessOrdersSSDExecution2(ProcessOrdersService ProcessOrdersSSDExecution2StartEnd ProcessOrdersSSDExecution2FinishEnd)

		MessageEnd::ProcessOrdersSSDCallMessage1SendingEnd(Supplier ProcessOrdersSSDCallMessage1)
		ExecutionEnd::ProcessOrdersSSDExecution1StartEnd(ProcessOrdersService ProcessOrdersSSDExecution1)
		ExecutionEnd::ProcessOrdersSSDExecution1FinishEnd(ProcessOrdersService ProcessOrdersSSDExecution1)
		MessageEnd::ProcessOrdersSSDCallMessage1ReturnReceivingEnd(Supplier ProcessOrdersSSDCallMessage1Return)
		MessageEnd::ProcessOrdersSSDCallMessage3SendingEnd(Supplier ProcessOrdersSSDCallMessage3)
		ExecutionEnd::ProcessOrdersSSDExecution2StartEnd(ProcessOrdersService ProcessOrdersSSDExecution2)
		ExecutionEnd::ProcessOrdersSSDExecution2FinishEnd(ProcessOrdersService ProcessOrdersSSDExecution2)
		MessageEnd::ProcessOrdersSSDCallMessage3ReturnReceivingEnd(Supplier ProcessOrdersSSDCallMessage3Return)

	}

	Interaction ProcessCheckoutSSD {

		[Participants: Cashier ProcessCheckoutService]

		CallMessage::ProcessCheckoutSSDCallMessage1(storeCartSummary ProcessCheckoutSSDCallMessage1SendingEnd -> ProcessCheckoutSSDExecution1StartEnd)
		ReturnMessage::ProcessCheckoutSSDCallMessage1Return(ProcessCheckoutSSDExecution1FinishEnd -> ProcessCheckoutSSDCallMessage1ReturnReceivingEnd ProcessCheckoutSSDCallMessage1)
		CallMessage::ProcessCheckoutSSDCallMessage3(viewSummary ProcessCheckoutSSDCallMessage3SendingEnd -> ProcessCheckoutSSDExecution2StartEnd)
		ReturnMessage::ProcessCheckoutSSDCallMessage3Return(ProcessCheckoutSSDExecution2FinishEnd -> ProcessCheckoutSSDCallMessage3ReturnReceivingEnd ProcessCheckoutSSDCallMessage3)

		Execution::ProcessCheckoutSSDExecution1(ProcessCheckoutService ProcessCheckoutSSDExecution1StartEnd ProcessCheckoutSSDExecution1FinishEnd)
		Execution::ProcessCheckoutSSDExecution2(ProcessCheckoutService ProcessCheckoutSSDExecution2StartEnd ProcessCheckoutSSDExecution2FinishEnd)

		MessageEnd::ProcessCheckoutSSDCallMessage1SendingEnd(Cashier ProcessCheckoutSSDCallMessage1)
		ExecutionEnd::ProcessCheckoutSSDExecution1StartEnd(ProcessCheckoutService ProcessCheckoutSSDExecution1)
		ExecutionEnd::ProcessCheckoutSSDExecution1FinishEnd(ProcessCheckoutService ProcessCheckoutSSDExecution1)
		MessageEnd::ProcessCheckoutSSDCallMessage1ReturnReceivingEnd(Cashier ProcessCheckoutSSDCallMessage1Return)
		MessageEnd::ProcessCheckoutSSDCallMessage3SendingEnd(Cashier ProcessCheckoutSSDCallMessage3)
		ExecutionEnd::ProcessCheckoutSSDExecution2StartEnd(ProcessCheckoutService ProcessCheckoutSSDExecution2)
		ExecutionEnd::ProcessCheckoutSSDExecution2FinishEnd(ProcessCheckoutService ProcessCheckoutSSDExecution2)
		MessageEnd::ProcessCheckoutSSDCallMessage3ReturnReceivingEnd(Cashier ProcessCheckoutSSDCallMessage3Return)

	}

	Interaction ViewNewOrdersSSD {

		[Participants: Supplier ViewNewOrdersService]

		CallMessage::ViewNewOrdersSSDCallMessage1(viewOrders ViewNewOrdersSSDCallMessage1SendingEnd -> ViewNewOrdersSSDExecution1StartEnd)
		ReturnMessage::ViewNewOrdersSSDCallMessage1Return(ViewNewOrdersSSDExecution1FinishEnd -> ViewNewOrdersSSDCallMessage1ReturnReceivingEnd ViewNewOrdersSSDCallMessage1)

		Execution::ViewNewOrdersSSDExecution1(ViewNewOrdersService ViewNewOrdersSSDExecution1StartEnd ViewNewOrdersSSDExecution1FinishEnd)

		MessageEnd::ViewNewOrdersSSDCallMessage1SendingEnd(Supplier ViewNewOrdersSSDCallMessage1)
		ExecutionEnd::ViewNewOrdersSSDExecution1StartEnd(ViewNewOrdersService ViewNewOrdersSSDExecution1)
		ExecutionEnd::ViewNewOrdersSSDExecution1FinishEnd(ViewNewOrdersService ViewNewOrdersSSDExecution1)
		MessageEnd::ViewNewOrdersSSDCallMessage1ReturnReceivingEnd(Supplier ViewNewOrdersSSDCallMessage1Return)

	}

	Service Electronics {

	}

	Service ThirdPartyServices {

	}

	/*Service ElectronicsStore111System {

	 * 	[Operation]
	 * 	systemLogin()

	 }*/
	Service SignupService {

		[Operation]
		customerRegUsername(username)
		customerRegPassword(password)
		customerDetails(email, phonenumber, address, fullName, userID)
		saveDetails(usename, password, email, phonenumber, address, customerID, fullName)

		[TempProperty]
		UserName : String
		Password : String
		FullName : String
		Address : String
		PhoneNumber : Integer
		Email : String

	}

	Service SystemLoginService {

		[Operation]
		usernameInput(username)
		passwordInput(password)

		[TempProperty]
		UserName : String
		Password : String

	}

	Service CredentialsCheckService {

		[Operation]
		validationCheck(username, password)
		validationMessage(validationState)

	}

	Service BrowseProductsService {

		[Operation]
		viewAllProducts()
		searchProducts(productName)

	}

	Service CheckOutService {

		[Operation]
		cartSummary(listOfProductID, quantity, orderID)
		makePayment(paymentMethod, orderID, transactionID, totalAmount, customerID)
		getGuestUserDetails(fullName, address, phoneNumber, email, customerID, orderID)
		newOrder(orderID, dateOfPurchase, totalPrice, produceList)

		[TempProperty]
		FullName : String
		Address : String
		PhoneNumber : Integer
		Email : String
		UserID : String
		DateOfPurchase: Date

	}

	Service ReturnProductService {

		[Operation]
		getTransactionID(transactionID)
		productID(productID)
		getReason(reasonOfReturn)
		saveReturn(customerID, transactionID, reasonOfReturn, returnID)

		[TempProperty]
		ProductID : String
		TransactionID : String
		Reason : String

	}

	Service ReviewCartService {

		[Operation]
		reviewCart(sessionID)

	}

	Service ModifyCartService {

		[Operation]
		modifyCart(sessionID, productID, quantity)

	}

	Service GiveFeedbackService {

		[Operation]
		giveFeedback(textFeedback, customerID, feedbackID)
		saveFeedback(customerID, textFeedback)

		[TempProperty]
		Feedback : String
		CustomerID : String
		FeedbackID : String

	}

	Service MembershipStatusService {

		[Operation]
		getMembershipStatus(memberID, email)
		showCurrentStatus()

		[TempProperty]
		CustomerID : String
		Email : String

	}

	Service ScanProductsService {

		[Operation]
		scanProducts(barcode, quantity)
		updateCart(productID, productName, quantity, price, cartID)

	}

	Service ProcessPaymentService {

		[Operation]
		paymentProcess(paymentMethod, totalAmount, customerID, orderID, transactionID)
		addLoyaltyPoints(points, memberID)

	}

	Service ProcessReturnService {

		[Operation]
		getCustomerID(customerID, transactionID, reasonOfReturn, productID)

		[TempProperty]
		CustomerID : String
		TransactionID : String
		OrderID : String

	}

	Service PrintReceiptService {

		[Operation]
		getUserDetails(customerID, transactionID, orderID)
		printReciept(transactionID, customerID, orderID, cartID, receiptID)

		[TempProperty]
		CustomerID : String
		TransactionID : String
		OrderID : String

	}

	Service PaymentValidationService {

		[Operation]
		processingUserPayment(creditcardNumber, expiryDate, cvvCode)
		bankContactandAuthorization()

		[TempProperty]
		CvvCodeSize :Integer
		CvvValid : Boolean
		CreditCardsize: Integer
		CreditCardValid: Boolean
		CreditCardDateValid: Boolean

	}

	Service InStorePaymentValidationService {

		[Operation]
		processingInStoreUserPayment(cerditCardNumber, expiryDate, cvvCode)
		bankContactandAuthorizationInStore()
		cashPayment(amount, cartID,cashByUser)

		[TempProperty]
		CvvCodeSize :Integer
		CvvValid : Boolean
		CreditCardsize: Integer
		CreditCardValid: Boolean
		CreditCardDateValid: Boolean

	}

	Service ViewReportsService {

		[Operation]
		viewAllReports()
		getReportType(reportID)
		generateReport(type, startDate, endDate, reportID)

		[TempProperty]
		ValidReportTypes : Set(String)

	}

	Service ManageInventoryService {

		[Operation]
		viewInventoryStockLevel()
		recordRestock(productName, productID, quantity)
		sendToSupplier(supplierID, productID, supplierOrderID)
		orderStockProducts(productID, quantity, restockProductsID)
		creatingNewSupplier(supplierID, companyName, contactDetails)

		[TempProperty]
		ExistingSupplier: Supplier

	}

	Service AccessFeedbackService {

		[Operation]
		viewAllFeedback()
		handleFeedback(customerID, textFeedback)
		immediateAction(customerID)

	}

	Service ProcessOrdersService {

		[Operation]
		processStoreOrder(orderID, productID, quantity)
		provideDeliveryInfo(orderID, date, warehouseID)

	}

	Service ProcessCheckoutService {

		[Operation]
		storeCartSummary(listOfProductID, quantity, orderID)
		viewSummary()

	}

	Service ViewNewOrdersService {

		[Operation]
		viewOrders(productID, supplierOrderID, quantity)

	}

	Service ElectronicsStore111System {

	}

// takes 
	Contract SystemLoginService::usernameInput(username : String) : Boolean {

		definition:
			u:Users = Users.allInstance()->any(user:Users | user.Username = username)

		precondition:
			username <> ''
		postcondition:
			if
				(u.oclIsUndefined() = false)
			then
				self.username = username and
				result = true
			else
				result = false
			endif
	}

	Contract SystemLoginService::passwordInput(password : String) : Boolean {

		definition:
			u:Users = Users.allInstance()->any(user:Users | user.Password = password)

		precondition:
			password <> ''
		postcondition:
			if
				(u.oclIsUndefined() = false)
			then
				self.Password = password and
				result = true
			else
				result = false
			endif
	}

	Contract CredentialsCheckService::validationCheck(username : String, password : String) : Boolean {

		definition:
			u:Users = Users.allInstance()->any(user:Users | user.UserName = username and user.Password = password)

		precondition:
			username <> '' and
			password <> ''
		postcondition:
			if
				(u.oclIsUndefined() = false)
			then
				result = true
			else
				result = false
			endif
	}

	Contract CredentialsCheckService::validationMessage(validationState : String) : Boolean {

		definition:
			messages:Set(String) = Set {"success".. "failure"}

		precondition:
			validationState <> ''
		postcondition:
			if
				(messages->includes(validationState))
			then
				result = validationState
			else
				result = 'Invalid message'
			endif
	}

	Contract SignupService::customerRegUsername(username : String) : Boolean {

		precondition:
			username <> ''
		postcondition:
			self.UserName = username and
			result = true
	}

	Contract SignupService::customerRegPassword(password : String) : Boolean {

		precondition:
			password <> ''
		postcondition:
			self.Password = password and
			result = true
	}

	Contract SignupService::customerDetails(email : String, phonenumber : String, address : String, fullName : String, userID : String) : Boolean { // ////////

		precondition:
			email <> '' and
			phonenumber <> '' and
			address <> '' and
			fullName <> '' and
			userID <> ''
		postcondition:
			let u:Users in
			u.oclIsNew() and
			u.UserID = userID and
			u.UserName = self.UserName and
			u.Password = self.Password and
			self.Email = email and
			self.PhoneNumber = phonenumber and
			self.Address = address and
			self.FullName = fullName and
			c.RelatedTo->includes(u) and
			result = true
	}

	Contract SignupService::saveDetails(usename : String, password : String, email : String, phonenumber : String, address : String, customerID : String, fullName : String) : Boolean {

//////////////////////////////////////////////////////////
		definition:
			newMember:Member = Member.allInstance(), // ->select(c:Member | c.MemberID = MemberID)
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID),
			u:Users = Users.allInstance()->any(u:Users | u.UserName = usename)

		precondition:
			usename = true and
			password = true and
			email = true and
			phonenumber = true and
			address = true and
			fullName = true and
			customerID <> ''
		postcondition:
			let m:Member in
			m.oclIsNew() and
			m.Username = usename and
			m.Password = password and
			m.Email = email and
			m.PhoneNumber = phonenumber and
			m.Address = address and
			m.CustomerID = customerID and
			m.FullName = fullName and
			c.Is->includes(m) and
			u.BelongTo->includes(m) and
			result = true
	}

	Contract BrowseProductsService::searchProducts(productName : String) : Set(Product) { // ///////////////////////////

		precondition:
			productName <> '' and
			productName.oclIsTypeOf(String)
		postcondition:
			result = Product.allInstance()->select(product:Product | product.ProductName = productName)
	}

	Contract BrowseProductsService::viewAllProducts() : Set(Product) {

		// definition:
		// allproducts:Set(Product) = Product.allInstance()
		precondition:
			true
		postcondition:
			result = Product.allInstance()
	}

	Contract CheckOutService::cartSummary(listOfProductID : String, quantity : String, orderID : String) : Cart { // /////////////////////////

		definition:
			c:Cart = Cart.allInstance()->any(c:Cart | c.OrderID = orderID)

		precondition:
			c.oclIsUndefined() = false
		postcondition:
			self.DateOfPurchase.isEqual(Today) and
			newOrder(orderID,self.DateOfPurchase,c.TotalAmount,c.ProductList) and
			result = c
	}

	Contract CheckOutService::makePayment(paymentMethod : String, orderID : String, transactionID : String, totalAmount: Real, customerID : String) : Boolean {

		definition:
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID)

		precondition:
			paymentMethod <> '' and
			orderID <> '' and
			transactionID <> ''
		postcondition:
			let t:Transaction in
			t.oclIsNew() and
			t.TrancationID = transactionID and
			t.PaymentMethod = paymentMethod and
			t.OrderID = orderID and
			t.Amount = totalAmount and
			c.CanBeProcessedBy->includes(t) and
			result = true
	}

	// ///////////////////////////////////////////////////////////////////////////////////
	Contract CheckOutService::getGuestUserDetails(fullName : String, address : String, phoneNumber : Integer, email : String, customerID : String, orderID :String) : Boolean { // //////////////////////////

		definition:
			u:Users = Users.allInstance()

		precondition:
			fullName <> '' and
			address <> '' and
			phoneNumber <> '' and
			email <> ''
		postcondition:
			let c:Customer in
			c.oclIsNew() and
			c.FullName = fullName and
			c.Address = address and
			c.PhoneNumber = phoneNumber and
			c.Email = email and
			c.CustomerID = customerID and
			Customer.allInstance()->includes(c) and
			u.Are->includes(c) and
			result = true
	}

	Contract ReturnProductService::getTransactionID(transactionID : String) : Set(Transaction) {

		definition:
			t:Transaction = Transaction.allInstance()->any(t:Transaction | t.transactionID = transactionID)

		precondition:
			transactionID <> ''
		postcondition:
			self.TransactionID = transactionID and
			result = t
	}

	Contract ReturnProductService::productID(productID : String) : Boolean { // //////////// Get the product details and create an object of ReturnedProducts

		definition:
			p:Product = Product.allInstance()->any(p:Product | p.ProductID = productID)

		precondition:
			productID <> ''
		postcondition:
			let r:ReturnedProducts in
			r.oclIsNew() and
			self.ProductID = productID and
			r.ProductID = productID and
			ReturnedProducts.allInstance()->includes(r) and
			result = true
	}

	Contract ReturnProductService::getReason(reasonOfReturn : String) : Boolean { // ///// saving the reason in variable
	// definition:
	// r:ReturnedProducts = ReturnedProducts.allInstance()->any(r:ReturnedProducts | r.ProductID = self.ProductID)

		precondition:
			reasonOfReturn <> ''
		postcondition:
			self.Reason = reasonOfReturn
	}

	Contract ReturnProductService::saveReturn(customerID : String, transactionID : String, reasonOfReturn : String, returnID : String) : Boolean {

		definition:
			r:ReturnedProducts = ReturnedProducts.allInstance()->any(r:ReturnedProducts | r.ProductID = self.ProductID),
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID)

		precondition:
			customerID <> '' and
			transactionID <> '' and
			reasonOfReturn <> '' and
			returnID <> ''
		postcondition:
			self.CustomerID = customerID and
			self.TransactionID = transactionID and
			self.Reason = reasonOfReturn and
			r.ReturnID = returnID and
			r.CustomerID = self.CustomerID and
			r.transactionID = self.TransactionID and
			r.reasonOfReturn = self.Reason and
			c.CanReturn->includes(r) and
			result = true
	}

	Contract ReviewCartService::reviewCart(sessionID : String) : Cart {

		definition:
			ca:Cart = Cart.allInstance()->any(cart:Cart | cart.CartID = sessionID)

		precondition:
			sessionID <> ''
		postcondition:
			if
				(ca.oclIsUndefined() = false)
			then
				result = ca // The cart is available and not expired
			else
				result = null
			endif
	}

	Contract ModifyCartService::modifyCart(sessionID : String, productID : String, quantity : String) : Boolean {

		definition:
			ca:Cart = Cart.allInstance()->any(cart:Cart | cart.CartID = sessionID and cart.ProductID = productID)

		precondition:
			sessionID <> '' and
			productID <> '' and
			quantity <> ''
		postcondition:
			ca.Quantity = quantity and
			result = true
	}

	Contract GiveFeedbackService::giveFeedback(textFeedback : String, customerID : String, feedbackID : String) : Boolean {

		// definition:
		// f:Feedback = Feedback.allInstance()->any(f:Feedback | f.feedback = sessionID and cart.ProductID = productID)
		precondition:
			textFeedback <> '' and
			customerID <> '' and
			feedbackID <> ''
		postcondition:
			self.Feedback = textFeedback and
			self.CustomerID = customerID and
			self.FeedbackID = feedbackID and
			result = true
	}

	Contract GiveFeedbackService::saveFeedback(customerID : String, textFeedback : String) : Boolean {

		definition: // // A provide a feed back the association provided on the diagram
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = self.customerID),
			f:Feedback = Feedback.allInstance()->any(f:Feedback | f.FeedbackID =self.FeedbackID)

		precondition:
			textFeedback <> '' and
			customerID <> ''
		postcondition:
			let f:Feedback in
			f.oclIsNew() and
			f.FeedbackID = self.FeedbackID and
			f.FeedbackContent = self.Feedback and
			f.CustomerID = self.CustomerID and
			c.Provide->includes(f) and
			result = true
	}

	Contract MembershipStatusService::getMembershipStatus(memberID : String, email : String) : Boolean {

		precondition:
			customerID <> '' and
			email <> ''
		postcondition:
			self.CustomerID = memberID and
			self.Email = email and
			result = true
	}

	Contract MembershipStatusService::showCurrentStatus() : Member {

		definition:
			m:Member = Member.allInstance()->any(m:Member | m.MemberID =self.CustomerID)

		precondition:
			m.oclIsUndefined() = false
		postcondition:
			result = m
	}

	Contract ScanProductsService::scanProducts(barcode : String, quantity : String) : Boolean {

		definition: // / The barcode will represent the Product ID of a specific product
			p:Product = Product.allInstance()->any(p:Product | p.ProductID = barcode)

		precondition:
			p.oclIsUndefined() = false and
			quantity > 0
		postcondition:
			if
				(p.StockLevel >= quantity)
			then
				updateCart(p.ProductID,p.ProductName,quantity,p.Price) and
				result = true
			else
				result = false
			endif
	}

	Contract ScanProductsService::updateCart(productID : String, productName : String, quantity : Integer, price : Real, cartID :String) : Boolean {

		definition:
			selectedProduct:Product = Product.allInstance()->any(p:Product | p.ProductID = productID and p.ProductName = productName)

		precondition:
			selectedProduct.oclIsUndefined() = false and
			quantity > 0

		postcondition:
			if
				(selectedProduct.StockLevel >= quantity)
			then
				Cart.ProductList->includes(selectedProduct) // Adding Product in the Cart
				and
				selectedProduct.StockLevel = selectedProduct.StockLevel@pre - quantity // Updating the quantity
				and
				result = true
			else
				result = false
			endif
	}

	Contract ProcessPaymentService::paymentProcess(paymentMethod : String, totalAmount : String, customerID : String, orderID : String, transactionID : String) : Boolean {

		definition:
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID)

		precondition:
			paymentMethod <> '' and
			totalAmount <> ''
		postcondition:
			let t:Transaction in
			t.oclIsNew() and
			t.TrancationID = transactionID and
			t.PaymentMethod = paymentMethod and
			t.OrderID = orderID and
			t.Amount = totalAmount and
			c.CanBeProcessedBy->includes(t) and
			result = true
	}

	Contract ProcessPaymentService::addLoyaltyPoints(points : Integer, memberID : String) : Boolean {

		definition:
			m:Member = Member.allInstance()->any(m:Member | m.MemberID = memberID)

		precondition:
			m.oclIsUndefined() = false // there exists a membwe with this ID
		postcondition:
			m.LoyaltyPoints = m.LoyaltyPoints + points and
			result = true
	}

	Contract ProcessReturnService::getCustomerID(customerID :String, transactionID:String, reasonOfReturn:String, productID:String) : Boolean {

		definition:
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID)

		precondition:
			true
		postcondition:
			let r:ReturnedProducts in
			r.oclIsNew() and
			r.CustomerID = customerID and
			r.ProductID = productID and
			r.TransactionID = transactionID and
			r.ReasonOfReturn = reasonOfReturn and
			ReturnedProducts.allInstance()->includes(r) and
			c.ReturnedBy->includes(t) and
			result = true
	}

	Contract PrintReceiptService::getUserDetails(customerID : String, transactionID : String, orderID : String) : Boolean {

		definition:
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID),
			t:Transaction = Transaction.allInstance()->any(t:Transaction | t.TransactionID = transactionID),
			o:Order = Order.allInstance()->any(o:Order | o.OrderID = orderID)

		precondition:
			c.oclIsUndefined() = false and
			t.oclIsUndefined() = false and
			o.oclIsUndefined() = false
		postcondition:
			// self.CustomerID = customerID and
			// self.TransactionID = transactionID and
			// self.OrderID = orderID and
			result = true
	}

	Contract PrintReceiptService::printReciept(transactionID : String, customerID : String, orderID : String, cartID : String, receiptID : String) : Boolean {

////////////// The system Should Print the Receipt of the Function getUserDetails
		definition:
			c:Customer = Customer.allInstance()->any(c:Customer | c.CustomerID = customerID),
			t:Transaction = Transaction.allInstance()->any(t:Transaction | t.TransactionID = transactionID),
			o:Order = Order.allInstance()->any(o:Order | o.OrderID = orderID),
			ca:Cart = Cart.allInstance()->any(ca:Cart | ca.Cart = cartID)

		precondition:
			c.oclIsUndefined() = false and
			t.oclIsUndefined() = false and
			o.oclIsUndefined() = false and
			ca.oclIsUndefined() = false
		postcondition:
			let re:Receipt in
			re.oclIsNew() and
			re.ReceiptID = receiptID and
			re.PaymentMethod = t.PaymentMethod and
			re.TransactionID = t.TransactionID and
			re.TotalAmount = ca.TotalAmount and
			re.DateOfPurchase.isEqual(Today) and
			Receipt.allInstance()->includes(re) and
			result = true
	}

	Contract PaymentValidationService::processingUserPayment(creditcardNumber : Integer, expiryDate : Date, cvvCode : Integer) : Boolean {

		// definition:
		// self.CvvCodeSize = cvvCode.size()
		// isValidCreditCard: Boolean = creditcardNumber.size() = 16 and creditcardNumber.matches('[0-9]*'),  // assuming a 16-digit card number
		// isValidExpiryDate: Boolean = expiryDate.size() = 5 and expiryDate.matches('([0-9]{2})/([0-9]{2})') and not (expiryDate.oclAsType(Date) < Today.oclAsType(Date)) // assuming MM/YY format
		// isValidCvvCode: Boolean = cvvCode.size() = 3 and cvvCode.matches('[0-9]*')  //-- assuming a 3-digit CVV
		precondition:
			self.CvvCodeSize = cvvCode.size() and
			self.CreditCardsize = creditcardNumber.size() and
			self.CvvCodeSize.isEqual(3) and
			self.CreditCardsize.isEqual(16)
		// isValidCreditCard and isValidExpiryDate and isValidCvvCode
		// isValidCvvCode =  cvvCode.size().isEqual(3) and cvvCode.matches('[0-9]*')
		postcondition:
			result = true
	}

	Contract PaymentValidationService::bankContactandAuthorization() : Boolean {

//////////////////////// Contacting the Bank (Handled By the Bank)
		precondition:
			true
		postcondition:
			true
	}

	Contract InStorePaymentValidationService::processingInStoreUserPayment(cerditCardNumber : Integer, expiryDate : Date, cvvCode : Integer) : Boolean {

		precondition:
			self.CvvCodeSize = cvvCode.size() and
			self.CreditCardsize = creditcardNumber.size() and
			self.CvvCodeSize.isEqual(3) and
			self.CreditCardsize.isEqual(16)
		// isValidCreditCard and isValidExpiryDate and isValidCvvCode
		// isValidCvvCode =  cvvCode.size().isEqual(3) and cvvCode.matches('[0-9]*')
		postcondition:
			result = true
	}

	Contract InStorePaymentValidationService::bankContactandAuthorizationInStore() : Boolean {

//////////////////////// Contacting the Bank (Handled By the Bank)
		precondition:
			true
		postcondition:
			true
	}

	Contract InStorePaymentValidationService::cashPayment(amount : String, cartID : String, cashByUser : Real) : Boolean {

		definition:
			ca:Cart = Cart.allInstance()->any(ca:Cart | ca.Cart = cartID) // and 

		precondition:
			amount <> '' and
			cartID <> '' and
			cashByUser <> ''
		postcondition:
			if
				cashByUser >= ca.TotalAmount
			then
				result = true
			else
				result = false
			endif
	}

	Contract ViewReportsService::generateReport(type : String, startDate : Date, endDate : Date, reportID : String) : Boolean {

		precondition:
			type <> '' and
			startDate <> '' and
			endDate <> '' and
			validReportTypes = Set{'sales'.. 'inventory'} and
			endDate <> ''
		postcondition:
			let report:Report in
			report.oclIsNew() and
			report.ReportID = reportID and
			report.TypeOfReport = type and
			report.DateGenerated.isEqual(Today) and
			report.ReportResult = "We will be integrating a third party tool that helps in creating and providing visual charts" and
			report.DateOfPurchase.isEqual(Today) and
			Report.allInstance()->includes(report) and
			result = true
	}

	Contract ViewReportsService::getReportType(reportID : String) : Report {

		definition:
			r:Report = Report.allInstance()->any(rep:Report | rep.reportID = reportID)

		precondition:
			reportID <> ''
		postcondition:
			result = r
	}

	Contract ViewReportsService::viewAllReports() : Set(Report) {

		definition:
			allReports:Set(Report) = Report.allInstance()

		precondition:
			true
		postcondition:
			result = allReports
	}

	Contract ManageInventoryService::sendToSupplier(supplierID : String, productID : String, supplierOrderID:String) : Boolean {

		definition:
			s:Supplier = Supplier.allInstance()->any(s | s.SupplierID = supplierID),
			p:Product = Product.allInstance()->any(p | p.ProductID = productID)

		precondition: // /// they exist
			s.oclIsUndefined() = false and
			p.oclIsUndefined() = false
		postcondition:
			let so:Supplier in
			so.oclIsNew() and
			so.SupplierID = supplierID and
			so.SupplierOrderID = supplierOrderID and
			so.ProductsList->includes(p) and
			so.Status = 'New Order' and
			so.allInstance()->includes(so) and
			s.Fulfill->includes(so) and
			result = true
	}

	Contract ManageInventoryService::recordRestock(productName : String, productID : String, quantity : Integer) : Boolean {

		definition:
			p:Product = Product.allInstance()->any(p | p.ProductID = productID and p.ProductName = productName)

		precondition:
			p.oclIsUndefined() = false
		postcondition:
			p.StockLevel = p.StockLevel@pre + quantity and
			result = true
	}

	Contract ManageInventoryService::viewInventoryStockLevel() : Inventory {

		definition:
			i:Inventory = Inventory.allInstance()

		precondition:
			true
		postcondition: // returning the inventory
			result = i
	}

	Contract ManageInventoryService::orderStockProducts(productID : String, quantity : Integer, restockProductsID:String) : Boolean {

		definition:
			p:Product = Product.allInstance()->any(p | p.ProductID = productID)

		precondition:
			p.oclIsUndefined() = false and
			quantity > 0
		postcondition:
			let rp:RestockProducts in
			rp.oclIsNew() and
			rp.ProductsNeededList = p and
			rp.RestockProductsID = restockProductsID and
			rp.allInstance()->includes(rp) and
			result = true
	}

	Contract CheckOutService::newOrder(orderID : String, dateOfPurchase : Date, totalPrice : Real, produceList : Set(Product)) : Boolean {

		precondition:
			true
		postcondition:
			let o:Order in
			o.oclIsNew() and
			o.OrderID = orderID and
			o.DateOfPurchase = dateOfPurchase and
			o.TotalPrice = totalPrice and
			o.ProductList->includes(produceList) and
			o.allInstance()->includes(o) and
			result = true
	}

	Contract ManageInventoryService::creatingNewSupplier(supplierID : String, companyName : String, contactDetails : String) : Boolean {

		definition:
			s = Supplier.allInstance()->any(s | s.SupplierID = supplierID)

		precondition:
			s.oclIsUndefined() = true // There no existing Supplier with this ID
		postcondition:
			let s:Supplier in
			s.oclIsNew() and
			s.SupplierID = supplierID and
			s.CompanyName = companyName and
			s.ContactDetails = contactDetails and
			s.allInstance()->includes(s) and
			result = true
	}

	Contract AccessFeedbackService::viewAllFeedback() : Boolean {

		precondition:
			true
		postcondition:
			true
	}

}

DomainModel Electronics { EntityContext CustomerOrLoyaltyMemberService { Entity Order {
		OrderID : String
		DateOfPurchase : Date
		TotalPrice : Real
		ProductsList : Set(Product)

		[Refer]
		MadeBY : Customer Association
		Accomedate : Product* Association
		CheckOut : Cashier! Association
		HasIn : Cart Association
	} Entity Product {
		ProductID : String
		ProductName : String
		Price : Real
		StockLevel : Integer

		[Refer]
		In : Order! Association
		StoredIn : Inventory Association
	} Entity Customer {
		CustomerID : String
		FullName : String
		Address : String
		PhoneNumber : Integer
		Email : String

		[Refer]
		Becomes : Member Association
		Make : Order* Association
		Are : Users ! Association
		Suggest : Feedback* ! Association
		ReturnedBy : ReturnedProducts ! Association
		CanBeProcessedBy : Transaction* Association
	} Entity Member {
		MemberID : String
		FullName : String
		Tier : String
		LoyaltyPoints : Integer

		[Refer]
		Is : Customer ! Association
		BelongTo : Users ! Association
	} Entity Feedback {
		FeedbackID : String
		FeedbackContent : String
		CustomerID : String

		[Refer]
		Accesses : StoreManager Association
		Provide : Customer Association
	} } EntityContext CashierService { Entity Cart {
		CartID : String
		// ProductID : String
		ProductList:Set(Product)
		// Quantity : Real
		TotalAmount : Real
		CustomerID : String
		OrderID : String

		[Refer]
		IsIn : Order ! Association
	} Entity Cashier {
		CashierID : String
		FullName : String
		EmployeeNumber : Integer
		Branch : String

		[Refer]
		CheckedOutBy : Order* Association
		Process : Transaction* Association
		Provides : Receipt* ! Association
		RepresentedBy : Users ! Association
	} Entity Receipt {
		ReceiptID : String
		PaymentMethod : String
		TotalPrice : Real
		ProductList : Cart
		DateOfPurchase : Date
		TransactionID : String

		[Refer]
		ProvidedBy : Cashier Association
		MustHave : Transaction ! Association
	} Entity Transaction {
		TransactionID : String
		Amount : Real
		PaymentMethod : String
		OrderID : String

		[Refer]
		ProcessedBy : Cashier! Association
		CanProcess : Customer ! Association
		ProvidedWithin : Receipt Association
	} } EntityContext StoreManagerService { Entity ReturnedProducts {
		ReturnID : String
		CustomerID : String
		ReasonOfReturn : String
		TransactionID : String

		[Refer]
		CanReturn : Customer* Association
	} Entity Inventory {
		InventoryID : String
		ProductList : Set(Product)

		[Refer]
		Contains : Product* ! Association
		ManangedBy : StoreManager ! Association
		SuppliedBy : SupplierOrder* ! Association
	} Entity Report {
		ReportID : String
		DateGenerated : Date
		ReportResult : String
		TypeOfReport : String

		[Refer]
		Generates : StoreManager Association
	} Entity RestockProducts {
		ProductsNeededList : Set(Product)
		RestockProductsID : String

		[Refer]
		AskTo : StoreManager Association
		FoundIn : SupplierOrder* Association
	} Entity StoreManager {
		StoreManagerID : String
		FullName : String
		Branch : String

		[Refer]
		Manages : Inventory Association
		Accessed : Feedback* ! Association
		Is : Users ! Association
		GeneratedBy : Report* ! Association
		DoneBy : RestockProducts * ! Association
	} } EntityContext SupplierService { Entity Supplier {
		SupplierID : String
		CompanyName : String
		ContactDetails : String

		[Refer]
		FulfilledBy : SupplierOrder* Association
		MayBe : Users ! Association
	} Entity SupplierOrder {
		SupplierOrderID : String
		SupplierID : String
		ProductsList : Set(Product)
		Status : String

		[Refer]
		Fulfill : Supplier ! Association
		Supplies : Inventory Association
		Includes : RestockProducts* ! Association
	} } EntityContext UserService { Entity Users {
		UserID : String
		UserName : String
		Password : String

		[Refer]
		CanBe : StoreManager Association
		IsA : Supplier Association
		Represents : Cashier Association
		RelatedTo : Customer Association
		MustBeAlso : Member Association
	} } }